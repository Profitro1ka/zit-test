{"version":3,"file":"static/js/9077.6c314d51.chunk.js","mappings":"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","sources":["entity/Task/ui/EditTask/EditTask.tsx","entity/Task/ui/TaskItem/TaskItem.tsx","entity/Task/ui/TaskList/TaskList.tsx","shared/lib/hooks/useAppDispatch/useAppDispatch.ts","features/ChooseAction/ui/ChooseAction.async.tsx","widgets/ToDoList/ui/ToDoList.tsx"],"sourcesContent":["import {FC, memo, useCallback, useState} from 'react';\r\nimport {useAppDispatch} from \"../../../../shared/lib/hooks/useAppDispatch/useAppDispatch\";\r\nimport {getCurrentTask, ITask, TaskSliceActions, taskState} from \"../../index\";\r\nimport {Button, Select, TextArea, TextInput, Text, Flex} from \"@gravity-ui/uikit\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {createUid} from \"../../utils/createUid\";\r\nimport {dateTimeParse, dateTime, DateTime} from '@gravity-ui/date-utils'\r\nimport {DatePicker} from '@gravity-ui/date-components';\r\n\r\ntype actionType = 'add' | 'edit'\r\n\r\nexport interface IEditTaskProps {\r\n    actionType: actionType\r\n    buttonText: string\r\n    setIsOpen: (value: boolean) => void\r\n}\r\n\r\nexport const EditTask: FC<IEditTaskProps> = memo((props) => {\r\n    const {actionType, buttonText, setIsOpen}: IEditTaskProps = props\r\n    const dispatch = useAppDispatch()\r\n    const currentTask = useSelector(getCurrentTask) || {} as ITask\r\n    const [taskName, setTaskName] = useState<string>(actionType === \"edit\" ? currentTask?.title : '')\r\n    const [taskDescription, setTaskDescription] = useState<string>(actionType === \"edit\" ? currentTask?.description : '')\r\n    const [taskState, setTaskState] = useState<taskState>(actionType === \"edit\" ? currentTask?.state : 'new')\r\n    const [taskDate, setTaskDate] = useState<string>(actionType === \"edit\" ? currentTask?.date : dateTime().format('DD.MM.YYYY'))\r\n\r\n    const editTask = useCallback(() => {\r\n        dispatch(TaskSliceActions.updateTask({\r\n            id: currentTask.id,\r\n            description: taskDescription,\r\n            title: taskName,\r\n            state: taskState,\r\n            date: taskDate\r\n        }))\r\n        console.log(taskDate)\r\n\r\n        setIsOpen(false)\r\n    }, [taskName, taskDescription, taskState, currentTask, taskDate])\r\n\r\n    const addTask = useCallback(() => {\r\n        dispatch(TaskSliceActions.addTask({\r\n            parentId: currentTask?.id,\r\n            newTask: {\r\n                title: taskName,\r\n                description: taskDescription,\r\n                state: taskState,\r\n                id: createUid(),\r\n                childTasks: [],\r\n                isSelected: false,\r\n                date: taskDate\r\n            }\r\n        }))\r\n\r\n        setIsOpen(false)\r\n    }, [currentTask, taskName, taskDescription, taskState, taskDate])\r\n\r\n    return (\r\n        <Flex direction={'column'} width={800} gap={2} style={{padding: 10}}>\r\n            <TextInput value={taskName}\r\n                       size={'xl'} placeholder={'Название задачи'}\r\n                       onChange={(event) =>\r\n                           setTaskName(event.target.value)\r\n                       }/>\r\n\r\n            <TextArea value={taskDescription}\r\n                      size={'xl'} placeholder={'Описание задачи'}\r\n                      onChange={(event) =>\r\n                          setTaskDescription(event.target.value)\r\n                      }/>\r\n\r\n            {actionType === \"edit\" &&\r\n                <Select value={[taskState]}\r\n                        onUpdate={(value) => setTaskState(value[0] as taskState)}\r\n                        placeholder={'Выбор состояния'} size={'xl'} width={'auto'}>\r\n                    <Select.Option value={'new'}>Новая</Select.Option>\r\n                    <Select.Option value={'inWork'}>В работе</Select.Option>\r\n                    <Select.Option value={'completed'}>Выполнено</Select.Option>\r\n                </Select>\r\n            }\r\n\r\n            <DatePicker format={'DD.MM.YYYY'} value={dateTimeParse(taskDate, {format : 'DD.MM.YYYY'}) || dateTime()} onUpdate={(value) => {\r\n                if (value) {\r\n                    setTaskDate(value.format('DD.MM.YYYY'))\r\n                }\r\n            }} size={'xl'} placeholder={'Запланировать задачу'}/>\r\n\r\n\r\n            <Button size={'xl'} onClick={() => {\r\n                if (actionType === 'edit') {\r\n                    editTask()\r\n                } else if (actionType === 'add') {\r\n                    addTask()\r\n                }\r\n            }}>\r\n                <Text>{buttonText}</Text></Button>\r\n        </Flex>\r\n    );\r\n});\r\n\r\n\r\n","import {FC, memo, useCallback, useRef, useState} from 'react';\r\nimport {useAppDispatch} from \"../../../../shared/lib/hooks/useAppDispatch/useAppDispatch\";\r\nimport {ArrowToggle, Card, Checkbox, Flex, Text} from \"@gravity-ui/uikit\";\r\nimport {ITask} from \"../../model/types/ITaskSliceSchema\";\r\nimport {TaskList} from \"../TaskList/TaskList\";\r\nimport {TaskSliceActions} from \"../../model/slice/ITask.slice\";\r\nimport {dateTimeParse} from \"@gravity-ui/date-utils\";\r\n\r\n\r\nexport interface ITaskProps {\r\n    task: ITask\r\n    isSelected?: boolean\r\n    onClick: (value: boolean) => void\r\n}\r\n\r\ntype direction = 'top' | 'bottom'\r\n\r\nexport const TaskItem: FC<ITaskProps> = memo((props) => {\r\n    const {task, isSelected, onClick}: ITaskProps = props\r\n    const [direction, setDirection] = useState<direction>('top')\r\n    const dispatch = useAppDispatch()\r\n    const toggle = useRef<HTMLDivElement | null>(null)\r\n\r\n\r\n    const setCurrentTask = useCallback((task: ITask, event: EventTarget) => {\r\n        if (toggle.current === event) {\r\n            dispatch(TaskSliceActions.setCurrentTask(task))\r\n            onClick(true)\r\n        }\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <Card height={'auto'} id={task.id}>\r\n                <Flex ref={toggle} height={'auto'} alignItems={\"center\"} justifyContent={\"space-around\"} gap={10} style={{padding: 10}}\r\n                      onClick={(event) => {\r\n                          setCurrentTask(task, event.target)\r\n                      }}>\r\n\r\n                    <Checkbox checked={isSelected ? isSelected : task.isSelected} disabled={isSelected}\r\n                              onUpdate={() => dispatch(TaskSliceActions.setIsSelected(task.id))} size={'l'}/>\r\n\r\n                    <Text style={{fontSize: 26}}>{task.title}</Text>\r\n                    <Text style={{fontSize: 26}}>{task.description}</Text>\r\n\r\n                    <Text style={{fontSize: 26}}>{task.date}</Text>\r\n\r\n                    <div style={{cursor: 'pointer'}}\r\n                         onClick={() => setDirection(direction === \"top\" ? 'bottom' : 'top')}>\r\n                        <ArrowToggle size={32} direction={direction}/>\r\n                    </div>\r\n                </Flex>\r\n            </Card>\r\n\r\n            <div style={{width: '95%', position: 'relative', left: '5%'}}>\r\n                {direction === 'bottom' &&\r\n                    <TaskList isAllSelected={isSelected ? isSelected : task.isSelected} tasks={task.childTasks}\r\n                              onClick={onClick}/>}\r\n            </div>\r\n        </>\r\n    );\r\n});\r\n\r\n\r\n","import {FC, memo } from 'react';\r\nimport {ITask} from \"../../model/types/ITaskSliceSchema\";\r\nimport {TaskItem} from \"../TaskItem/TaskItem\";\r\nimport {Flex} from \"@gravity-ui/uikit\";\r\n\r\nexport interface ITaskProps {\r\n    tasks: ITask[];\r\n    isAllSelected?: boolean;\r\n    onClick: (value: boolean)=>void\r\n}\r\n\r\nexport const TaskList: FC<ITaskProps> = memo((props) => {\r\n    const {tasks, isAllSelected, onClick}: ITaskProps = props\r\n\r\n    return (\r\n        <Flex direction={\"column\"} gap={2}>\r\n            {tasks.map(value =>\r\n                <TaskItem key={value.id} isSelected={isAllSelected} task={value} onClick={onClick}/>\r\n            )}\r\n        </Flex>\r\n    );\r\n});\r\n\r\n\r\n","import { useDispatch } from 'react-redux';\r\n\r\nimport { type AppDispatch } from '../../../../app/providers/StoreProvider';\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\n","import {ComponentType, lazy} from \"react\";\r\nimport type {IChooseActionProps} from \"./ChooseAction\";\r\n\r\nexport const ChooseActionAsync = lazy<ComponentType<IChooseActionProps>>(\r\n    async () => await import('./ChooseAction')\r\n        .then((module) => ({default: module.ChooseAction})),\r\n);\r\n","import {FC, memo, useCallback, useEffect, useMemo, useState} from 'react';\r\nimport {useAppDispatch} from \"../../../shared/lib/hooks/useAppDispatch/useAppDispatch\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {getTasks, TaskSliceActions} from \"../../../entity/Task\";\r\nimport {TaskList} from \"../../../entity/Task/ui/TaskList/TaskList\";\r\nimport {Button, Flex, Modal, Text} from \"@gravity-ui/uikit\";\r\nimport {ChooseAction} from \"../../../features/ChooseAction\";\r\nimport {EditTask} from \"../../../entity/Task/ui/EditTask/EditTask\";\r\n\r\ninterface IToDoListProps {\r\n}\r\n\r\nexport const ToDoList: FC<IToDoListProps> = memo(() => {\r\n    const dispatch = useAppDispatch()\r\n    const tasks = useSelector(getTasks)\r\n    const [isOpen, setIsOpen] = useState<boolean>(false)\r\n    const [addIsOpen, setAddIsOpen] = useState<boolean>(false)\r\n\r\n    const deleteTask = useCallback(() => {\r\n        dispatch(TaskSliceActions.deleteSelectedTask())\r\n    }, [tasks])\r\n\r\n\r\n    return (\r\n        <>\r\n            <Flex direction={\"column\"} gap={5} style={{ margin : 15}}>\r\n                <Text style={{fontSize: 30, fontWeight: 700, }}>Новые:</Text>\r\n                <TaskList tasks={tasks.filter(value => value.state === \"new\")} onClick={setIsOpen}/>\r\n            </Flex>\r\n\r\n            <Flex direction={\"column\"} gap={5} style={{ margin : 15}}>\r\n                <Text style={{fontSize: 30, fontWeight: 700}}>В работе:</Text>\r\n                <TaskList tasks={tasks.filter(value => value.state === \"inWork\")} onClick={setIsOpen}/>\r\n            </Flex>\r\n\r\n            <Flex direction={\"column\"} gap={5} style={{ margin : 15}}>\r\n                <Text style={{fontSize: 30, fontWeight: 700}}>Выполненые:</Text>\r\n                <TaskList tasks={tasks.filter(value => value.state === \"completed\")} onClick={setIsOpen}/>\r\n            </Flex>\r\n\r\n\r\n            <Flex gap={5} style={{margin: 20}}>\r\n                <Button size={\"xl\"} onClick={() => setAddIsOpen(true)}><Text>Добавить</Text></Button>\r\n                <Button size={\"xl\"} onClick={deleteTask}><Text color={'danger'}>Удалить выбранное</Text></Button>\r\n            </Flex>\r\n\r\n            <Modal open={addIsOpen} onClose={() => setAddIsOpen(false)}>\r\n                <EditTask buttonText={'Создать'} actionType={\"add\"} setIsOpen={setAddIsOpen}/>\r\n            </Modal>\r\n\r\n            <ChooseAction setIsOpen={setIsOpen} isOpen={isOpen}/>\r\n        </>\r\n    );\r\n});\r\n\r\n\r\n"],"names":["EditTask","memo","props","actionType","buttonText","setIsOpen","dispatch","useAppDispatch","currentTask","useSelector","getCurrentTask","taskName","setTaskName","useState","title","taskDescription","setTaskDescription","description","taskState","setTaskState","state","taskDate","setTaskDate","date","dateTime","format","editTask","useCallback","TaskSliceActions","updateTask","id","console","log","addTask","parentId","newTask","createUid","childTasks","isSelected","_jsxs","Flex","direction","width","gap","style","padding","children","_jsx","TextInput","value","size","placeholder","onChange","event","target","TextArea","Select","onUpdate","Option","DatePicker","dateTimeParse","Button","onClick","Text","TaskItem","task","setDirection","toggle","useRef","setCurrentTask","current","_Fragment","Card","height","ref","alignItems","justifyContent","Checkbox","checked","disabled","setIsSelected","fontSize","cursor","ArrowToggle","position","left","TaskList","isAllSelected","tasks","map","useDispatch","ChooseActionAsync","lazy","async","then","module","default","ChooseAction","ToDoList","getTasks","isOpen","addIsOpen","setAddIsOpen","deleteTask","deleteSelectedTask","margin","fontWeight","filter","color","Modal","open","onClose"],"sourceRoot":""}