{"version":3,"file":"static/js/4948.b35da0e0.chunk.js","mappings":"yOAiBO,MAAMA,GAA2BC,EAAAA,EAAAA,OAAMC,IAC1C,MAAM,KAACC,EAAI,WAAEC,EAAU,QAAEC,GAAuBH,GACzCI,EAAWC,IAAgBC,EAAAA,EAAAA,UAAoB,OAChDC,GAAWC,EAAAA,EAAAA,KACXC,GAASC,EAAAA,EAAAA,QAA8B,MAGvCC,GAAiBC,EAAAA,EAAAA,cAAY,CAACX,EAAaY,KACzCJ,EAAOK,UAAYD,IACnBN,EAASQ,EAAAA,GAAiBJ,eAAeV,IACzCE,GAAQ,GACZ,GACD,IAIH,OACIa,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIC,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAACC,OAAQ,OAAQC,GAAIrB,EAAKqB,GAAGJ,UAC9BF,EAAAA,EAAAA,MAACO,EAAAA,EAAI,CAACC,IAAKf,EAAQY,OAAQ,OAAQI,WAAY,SAAUC,eAAgB,eAAgBC,IAAK,GAAIC,MAAO,CAACC,QAAS,IAC7G1B,QAAUU,IACNF,EAAeV,EAAMY,EAAMiB,OAAO,EACpCZ,SAAA,EAEJC,EAAAA,EAAAA,KAACY,EAAAA,EAAQ,CAACC,QAAS9B,GAA0BD,EAAKC,WAAY+B,SAAU/B,EAC9DgC,SAAUA,IAAM3B,EAASQ,EAAAA,GAAiBoB,cAAclC,EAAKqB,KAAMc,KAAM,OAEnFjB,EAAAA,EAAAA,KAACkB,EAAAA,EAAI,CAACT,MAAO,CAACU,SAAU,IAAIpB,SAAEjB,EAAKsC,SACnCpB,EAAAA,EAAAA,KAACkB,EAAAA,EAAI,CAACT,MAAO,CAACU,SAAU,IAAIpB,SAAEjB,EAAKuC,eAEnCrB,EAAAA,EAAAA,KAACkB,EAAAA,EAAI,CAACT,MAAO,CAACU,SAAU,IAAIpB,SAAEjB,EAAKwC,QAEnCtB,EAAAA,EAAAA,KAAA,OAAKS,MAAO,CAACc,OAAQ,WAChBvC,QAASA,IAAME,EAA2B,QAAdD,EAAsB,SAAW,OAAOc,UACrEC,EAAAA,EAAAA,KAACwB,EAAAA,EAAW,CAACP,KAAM,GAAIhC,UAAWA,YAK9Ce,EAAAA,EAAAA,KAAA,OAAKS,MAAO,CAACgB,MAAO,MAAOC,SAAU,WAAYC,KAAM,MAAM5B,SAC1C,WAAdd,IACGe,EAAAA,EAAAA,KAAC4B,EAAQ,CAACC,cAAe9C,GAA0BD,EAAKC,WAAY+C,MAAOhD,EAAKiD,WACtE/C,QAASA,QAE5B,IClDE4C,GAA2BhD,EAAAA,EAAAA,OAAMC,IAC1C,MAAM,MAACiD,EAAK,cAAED,EAAa,QAAE7C,GAAuBH,EAEpD,OACImB,EAAAA,EAAAA,KAACI,EAAAA,EAAI,CAACnB,UAAW,SAAUuB,IAAK,EAAET,SAC7B+B,EAAME,KAAIC,IACPjC,EAAAA,EAAAA,KAACrB,EAAQ,CAAgBI,WAAY8C,EAAe/C,KAAMmD,EAAOjD,QAASA,GAA3DiD,EAAM9B,OAEtB,G,gDCfR,MAAMd,EAAiBA,KAAM6C,EAAAA,EAAAA,K","sources":["entity/Task/ui/TaskItem/TaskItem.tsx","entity/Task/ui/TaskList/TaskList.tsx","shared/lib/hooks/useAppDispatch/useAppDispatch.ts"],"sourcesContent":["import {FC, memo, useCallback, useRef, useState} from 'react';\r\nimport {useAppDispatch} from \"../../../../shared/lib/hooks/useAppDispatch/useAppDispatch\";\r\nimport {ArrowToggle, Card, Checkbox, Flex, Text} from \"@gravity-ui/uikit\";\r\nimport {ITask} from \"../../model/types/ITaskSliceSchema\";\r\nimport {TaskList} from \"../TaskList/TaskList\";\r\nimport {TaskSliceActions} from \"../../model/slice/ITask.slice\";\r\nimport {dateTimeParse} from \"@gravity-ui/date-utils\";\r\n\r\n\r\nexport interface ITaskProps {\r\n    task: ITask\r\n    isSelected?: boolean\r\n    onClick: (value: boolean) => void\r\n}\r\n\r\ntype direction = 'top' | 'bottom'\r\n\r\nexport const TaskItem: FC<ITaskProps> = memo((props) => {\r\n    const {task, isSelected, onClick}: ITaskProps = props\r\n    const [direction, setDirection] = useState<direction>('top')\r\n    const dispatch = useAppDispatch()\r\n    const toggle = useRef<HTMLDivElement | null>(null)\r\n\r\n\r\n    const setCurrentTask = useCallback((task: ITask, event: EventTarget) => {\r\n        if (toggle.current === event) {\r\n            dispatch(TaskSliceActions.setCurrentTask(task))\r\n            onClick(true)\r\n        }\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <Card height={'auto'} id={task.id}>\r\n                <Flex ref={toggle} height={'auto'} alignItems={\"center\"} justifyContent={\"space-around\"} gap={10} style={{padding: 10}}\r\n                      onClick={(event) => {\r\n                          setCurrentTask(task, event.target)\r\n                      }}>\r\n\r\n                    <Checkbox checked={isSelected ? isSelected : task.isSelected} disabled={isSelected}\r\n                              onUpdate={() => dispatch(TaskSliceActions.setIsSelected(task.id))} size={'l'}/>\r\n\r\n                    <Text style={{fontSize: 26}}>{task.title}</Text>\r\n                    <Text style={{fontSize: 26}}>{task.description}</Text>\r\n\r\n                    <Text style={{fontSize: 26}}>{task.date}</Text>\r\n\r\n                    <div style={{cursor: 'pointer'}}\r\n                         onClick={() => setDirection(direction === \"top\" ? 'bottom' : 'top')}>\r\n                        <ArrowToggle size={32} direction={direction}/>\r\n                    </div>\r\n                </Flex>\r\n            </Card>\r\n\r\n            <div style={{width: '95%', position: 'relative', left: '5%'}}>\r\n                {direction === 'bottom' &&\r\n                    <TaskList isAllSelected={isSelected ? isSelected : task.isSelected} tasks={task.childTasks}\r\n                              onClick={onClick}/>}\r\n            </div>\r\n        </>\r\n    );\r\n});\r\n\r\n\r\n","import {FC, memo } from 'react';\r\nimport {ITask} from \"../../model/types/ITaskSliceSchema\";\r\nimport {TaskItem} from \"../TaskItem/TaskItem\";\r\nimport {Flex} from \"@gravity-ui/uikit\";\r\n\r\nexport interface ITaskProps {\r\n    tasks: ITask[];\r\n    isAllSelected?: boolean;\r\n    onClick: (value: boolean)=>void\r\n}\r\n\r\nexport const TaskList: FC<ITaskProps> = memo((props) => {\r\n    const {tasks, isAllSelected, onClick}: ITaskProps = props\r\n\r\n    return (\r\n        <Flex direction={\"column\"} gap={2}>\r\n            {tasks.map(value =>\r\n                <TaskItem key={value.id} isSelected={isAllSelected} task={value} onClick={onClick}/>\r\n            )}\r\n        </Flex>\r\n    );\r\n});\r\n\r\n\r\n","import { useDispatch } from 'react-redux';\r\n\r\nimport { type AppDispatch } from '../../../../app/providers/StoreProvider';\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\n"],"names":["TaskItem","memo","props","task","isSelected","onClick","direction","setDirection","useState","dispatch","useAppDispatch","toggle","useRef","setCurrentTask","useCallback","event","current","TaskSliceActions","_jsxs","_Fragment","children","_jsx","Card","height","id","Flex","ref","alignItems","justifyContent","gap","style","padding","target","Checkbox","checked","disabled","onUpdate","setIsSelected","size","Text","fontSize","title","description","date","cursor","ArrowToggle","width","position","left","TaskList","isAllSelected","tasks","childTasks","map","value","useDispatch"],"sourceRoot":""}