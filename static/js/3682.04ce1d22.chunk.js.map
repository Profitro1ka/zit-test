{"version":3,"file":"static/js/3682.04ce1d22.chunk.js","mappings":"2NAUO,MAAMA,GAAuCC,EAAAA,EAAAA,OAAMC,IACtD,MAAM,UAACC,EAAS,OAAEC,GAA8BF,GACzCG,EAAYC,IAAiBC,EAAAA,EAAAA,WAAkB,IAC/CC,EAAWC,IAAgBF,EAAAA,EAAAA,WAAkB,GAEpD,OACIG,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIC,EAAAA,EAAAA,KAACC,EAAAA,EAAK,CAACC,KAAMX,EAAQY,QAASA,IAAMb,GAAU,GAAOS,UACjDF,EAAAA,EAAAA,MAACO,EAAAA,EAAI,CAACC,IAAK,EAAGC,OAAQ,IAAKC,WAAY,SAAUC,MAAO,CAACC,QAAS,IAAIV,SAAA,EAClEC,EAAAA,EAAAA,KAACU,EAAAA,EAAM,CAACC,KAAM,KAAMC,QAASA,KACzBtB,GAAU,GACVM,GAAa,EAAK,EACpBG,UAACC,EAAAA,EAAAA,KAACa,EAAAA,EAAI,CAAAd,SAAC,yGAETC,EAAAA,EAAAA,KAACU,EAAAA,EAAM,CAACC,KAAM,KAAMC,QAASA,KACzBtB,GAAU,GACVG,GAAc,EAAK,EACrBM,UAACC,EAAAA,EAAAA,KAACa,EAAAA,EAAI,CAACC,MAAO,gBAAgBf,SAAC,gIAIzCC,EAAAA,EAAAA,KAACC,EAAAA,EAAK,CAACC,KAAMP,EAAWQ,QAASA,IAAMP,GAAa,GAAOG,UACvDC,EAAAA,EAAAA,KAACe,EAAAA,EAAQ,CAACC,WAAY,6CAAWC,WAAY,MAAO3B,UAAWM,OAGnEI,EAAAA,EAAAA,KAACC,EAAAA,EAAK,CAACC,KAAMV,EAAYW,QAASA,IAAMV,GAAc,GAAOM,UACzDC,EAAAA,EAAAA,KAACe,EAAAA,EAAQ,CAACC,WAAY,iFAAkBC,WAAY,OAAQ3B,UAAWG,QAE5E,G","sources":["features/ChooseAction/ui/ChooseAction.tsx"],"sourcesContent":["import {FC, memo, useState} from 'react';\r\nimport {Button, Flex, Modal, Text} from \"@gravity-ui/uikit\";\r\nimport {EditTask} from \"../../../entity/Task/ui/EditTask/EditTask\";\r\n\r\n\r\nexport interface IChooseActionProps {\r\n    setIsOpen: (value: boolean) => void;\r\n    isOpen: boolean\r\n}\r\n\r\nexport const ChooseAction: FC<IChooseActionProps> = memo((props) => {\r\n    const {setIsOpen, isOpen}: IChooseActionProps = props\r\n    const [editIsOpen, setEditIsOpen] = useState<boolean>(false)\r\n    const [addIsOpen, setAddIsOpen] = useState<boolean>(false)\r\n\r\n    return (\r\n        <>\r\n            <Modal open={isOpen} onClose={() => setIsOpen(false)}>\r\n                <Flex gap={3} height={100} alignItems={\"center\"} style={{padding: 20}}>\r\n                    <Button size={'xl'} onClick={() => {\r\n                        setIsOpen(false)\r\n                        setAddIsOpen(true)\r\n                    }}><Text>Создать подзадачу</Text></Button>\r\n\r\n                    <Button size={'xl'} onClick={() => {\r\n                        setIsOpen(false)\r\n                        setEditIsOpen(true)\r\n                    }}><Text color={'warning-heavy'}>Редактировать задачу</Text></Button>\r\n                </Flex>\r\n            </Modal>\r\n\r\n            <Modal open={addIsOpen} onClose={() => setAddIsOpen(false)}>\r\n                <EditTask buttonText={'Создать'} actionType={\"add\"} setIsOpen={setAddIsOpen}/>\r\n            </Modal>\r\n\r\n            <Modal open={editIsOpen} onClose={() => setEditIsOpen(false)}>\r\n                <EditTask buttonText={'Редактировать'}  actionType={\"edit\"} setIsOpen={setEditIsOpen}/>\r\n            </Modal>\r\n        </>\r\n    );\r\n});\r\n\r\n\r\n"],"names":["ChooseAction","memo","props","setIsOpen","isOpen","editIsOpen","setEditIsOpen","useState","addIsOpen","setAddIsOpen","_jsxs","_Fragment","children","_jsx","Modal","open","onClose","Flex","gap","height","alignItems","style","padding","Button","size","onClick","Text","color","EditTask","buttonText","actionType"],"sourceRoot":""}